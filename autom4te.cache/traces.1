m4trace:m4/m4_ax_cxx_compile_stdcxx.m4:49: -1- AC_DEFUN([AX_CXX_COMPILE_STDCXX], [dnl
  m4_if([$1], [11], [ax_cxx_compile_alternatives="11 0x"],
        [$1], [14], [ax_cxx_compile_alternatives="14 1y"],
        [$1], [17], [ax_cxx_compile_alternatives="17 1z"],
        [m4_fatal([invalid first argument `$1' to AX_CXX_COMPILE_STDCXX])])dnl
  m4_if([$2], [], [],
        [$2], [ext], [],
        [$2], [noext], [],
        [m4_fatal([invalid second argument `$2' to AX_CXX_COMPILE_STDCXX])])dnl
  m4_if([$3], [], [ax_cxx_compile_cxx$1_required=true],
        [$3], [mandatory], [ax_cxx_compile_cxx$1_required=true],
        [$3], [optional], [ax_cxx_compile_cxx$1_required=false],
        [m4_fatal([invalid third argument `$3' to AX_CXX_COMPILE_STDCXX])])
  AC_LANG_PUSH([C++])dnl
  ac_success=no

  m4_if([$2], [noext], [], [dnl
  if test x$ac_success = xno; then
    for alternative in ${ax_cxx_compile_alternatives}; do
      switch="-std=gnu++${alternative}"
      cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx$1_$switch])
      AC_CACHE_CHECK(whether $CXX supports C++$1 features with $switch,
                     $cachevar,
        [ac_save_CXX="$CXX"
         CXX="$CXX $switch"
         AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],
          [eval $cachevar=yes],
          [eval $cachevar=no])
         CXX="$ac_save_CXX"])
      if eval test x\$$cachevar = xyes; then
        CXX="$CXX $switch"
        if test -n "$CXXCPP" ; then
          CXXCPP="$CXXCPP $switch"
        fi
        ac_success=yes
        break
      fi
    done
  fi])

  m4_if([$2], [ext], [], [dnl
  if test x$ac_success = xno; then
    dnl HP's aCC needs +std=c++11 according to:
    dnl http://h21007.www2.hp.com/portal/download/files/unprot/aCxx/PDF_Release_Notes/769149-001.pdf
    dnl Cray's crayCC needs "-h std=c++11"
    for alternative in ${ax_cxx_compile_alternatives}; do
      for switch in -std=c++${alternative} +std=c++${alternative} "-h std=c++${alternative}"; do
        cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx$1_$switch])
        AC_CACHE_CHECK(whether $CXX supports C++$1 features with $switch,
                       $cachevar,
          [ac_save_CXX="$CXX"
           CXX="$CXX $switch"
           AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],
            [eval $cachevar=yes],
            [eval $cachevar=no])
           CXX="$ac_save_CXX"])
        if eval test x\$$cachevar = xyes; then
          CXX="$CXX $switch"
          if test -n "$CXXCPP" ; then
            CXXCPP="$CXXCPP $switch"
          fi
          ac_success=yes
          break
        fi
      done
      if test x$ac_success = xyes; then
        break
      fi
    done
  fi])
  AC_LANG_POP([C++])
  if test x$ax_cxx_compile_cxx$1_required = xtrue; then
    if test x$ac_success = xno; then
      AC_MSG_ERROR([*** A compiler with support for C++$1 language features is required.])
    fi
  fi
  if test x$ac_success = xno; then
    HAVE_CXX$1=0
    AC_MSG_NOTICE([No compiler with C++$1 support was found])
  else
    HAVE_CXX$1=1
    AC_DEFINE(HAVE_CXX$1,1,
              [define if the compiler supports basic C++$1 syntax])
  fi
  AC_SUBST(HAVE_CXX$1)
])
m4trace:m4/m4_ax_openmp.m4:72: -1- AC_DEFUN([AX_OPENMP], [
AC_PREREQ([2.69]) dnl for _AC_LANG_PREFIX

AC_CACHE_CHECK([for OpenMP flag of _AC_LANG compiler], ax_cv_[]_AC_LANG_ABBREV[]_openmp, [save[]_AC_LANG_PREFIX[]FLAGS=$[]_AC_LANG_PREFIX[]FLAGS
ax_cv_[]_AC_LANG_ABBREV[]_openmp=unknown
# Flags to try:  -fopenmp (gcc), -mp (SGI & PGI),
#                -qopenmp (icc>=15), -openmp (icc),
#                -xopenmp (Sun), -omp (Tru64),
#                -qsmp=omp (AIX),
#                none
ax_openmp_flags="-fopenmp -openmp -qopenmp -mp -xopenmp -omp -qsmp=omp none"
if test "x$OPENMP_[]_AC_LANG_PREFIX[]FLAGS" != x; then
  ax_openmp_flags="$OPENMP_[]_AC_LANG_PREFIX[]FLAGS $ax_openmp_flags"
fi
for ax_openmp_flag in $ax_openmp_flags; do
  case $ax_openmp_flag in
    none) []_AC_LANG_PREFIX[]FLAGS=$save[]_AC_LANG_PREFIX[] ;;
    *) []_AC_LANG_PREFIX[]FLAGS="$save[]_AC_LANG_PREFIX[]FLAGS $ax_openmp_flag" ;;
  esac
  AC_LINK_IFELSE([AC_LANG_SOURCE([[
@%:@include <omp.h>

static void
parallel_fill(int * data, int n)
{
  int i;
@%:@pragma omp parallel for
  for (i = 0; i < n; ++i)
    data[i] = i;
}

int
main()
{
  int arr[100000];
  omp_set_num_threads(2);
  parallel_fill(arr, 100000);
  return 0;
}
]])],[ax_cv_[]_AC_LANG_ABBREV[]_openmp=$ax_openmp_flag; break],[])
done
[]_AC_LANG_PREFIX[]FLAGS=$save[]_AC_LANG_PREFIX[]FLAGS
])
if test "x$ax_cv_[]_AC_LANG_ABBREV[]_openmp" = "xunknown"; then
  m4_default([$2],:)
else
  if test "x$ax_cv_[]_AC_LANG_ABBREV[]_openmp" != "xnone"; then
    OPENMP_[]_AC_LANG_PREFIX[]FLAGS=$ax_cv_[]_AC_LANG_ABBREV[]_openmp
  fi
  m4_default([$1], [AC_DEFINE(HAVE_OPENMP,1,[Define if OpenMP is enabled])])
fi
])
m4trace:configure.ac:13: -1- m4_pattern_forbid([^_?A[CHUM]_])
m4trace:configure.ac:13: -1- m4_pattern_forbid([_AC_])
m4trace:configure.ac:13: -1- m4_pattern_forbid([^LIBOBJS$], [do not use LIBOBJS directly, use AC_LIBOBJ (see section `AC_LIBOBJ vs LIBOBJS'])
m4trace:configure.ac:13: -1- m4_pattern_allow([^AS_FLAGS$])
m4trace:configure.ac:13: -1- m4_pattern_forbid([^_?m4_])
m4trace:configure.ac:13: -1- m4_pattern_forbid([^dnl$])
m4trace:configure.ac:13: -1- m4_pattern_forbid([^_?AS_])
m4trace:configure.ac:13: -1- m4_pattern_allow([^SHELL$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^PATH_SEPARATOR$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^PACKAGE_NAME$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^PACKAGE_TARNAME$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^PACKAGE_VERSION$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^PACKAGE_STRING$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^PACKAGE_BUGREPORT$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^PACKAGE_URL$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^exec_prefix$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^prefix$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^program_transform_name$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^bindir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^sbindir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^libexecdir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^datarootdir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^datadir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^sysconfdir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^sharedstatedir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^localstatedir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^includedir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^oldincludedir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^docdir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^infodir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^htmldir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^dvidir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^pdfdir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^psdir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^libdir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^localedir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^mandir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^PACKAGE_NAME$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^PACKAGE_TARNAME$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^PACKAGE_VERSION$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^PACKAGE_STRING$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^PACKAGE_BUGREPORT$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^PACKAGE_URL$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^DEFS$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^ECHO_C$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^ECHO_N$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^ECHO_T$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^LIBS$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^build_alias$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^host_alias$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^target_alias$])
m4trace:configure.ac:20: -1- _AM_CONFIG_MACRO_DIRS([m4])
m4trace:configure.ac:25: -1- m4_pattern_allow([^CXX$])
m4trace:configure.ac:25: -1- m4_pattern_allow([^CXXFLAGS$])
m4trace:configure.ac:25: -1- m4_pattern_allow([^LDFLAGS$])
m4trace:configure.ac:25: -1- m4_pattern_allow([^LIBS$])
m4trace:configure.ac:25: -1- m4_pattern_allow([^CPPFLAGS$])
m4trace:configure.ac:25: -1- m4_pattern_allow([^CXX$])
m4trace:configure.ac:25: -1- m4_pattern_allow([^ac_ct_CXX$])
m4trace:configure.ac:25: -1- m4_pattern_allow([^EXEEXT$])
m4trace:configure.ac:25: -1- m4_pattern_allow([^OBJEXT$])
m4trace:configure.ac:26: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:26: -1- m4_pattern_allow([^CFLAGS$])
m4trace:configure.ac:26: -1- m4_pattern_allow([^LDFLAGS$])
m4trace:configure.ac:26: -1- m4_pattern_allow([^LIBS$])
m4trace:configure.ac:26: -1- m4_pattern_allow([^CPPFLAGS$])
m4trace:configure.ac:26: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:26: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:26: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:26: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:26: -1- m4_pattern_allow([^ac_ct_CC$])
m4trace:configure.ac:28: -1- AX_CXX_COMPILE_STDCXX([14])
m4trace:configure.ac:28: -1- m4_pattern_allow([^HAVE_CXX14$])
m4trace:configure.ac:28: -1- m4_pattern_allow([^HAVE_CXX14$])
m4trace:configure.ac:36: -1- m4_pattern_allow([^HAVE_LIBM$])
m4trace:configure.ac:37: -1- m4_pattern_allow([^HAVE_LIBJPEG$])
m4trace:configure.ac:38: -1- m4_pattern_allow([^HAVE_LIBPNG$])
m4trace:configure.ac:39: -1- m4_pattern_allow([^HAVE_LIBTIFF$])
m4trace:configure.ac:40: -1- m4_pattern_allow([^HAVE_LIBEXPAT$])
m4trace:configure.ac:41: -1- m4_pattern_allow([^HAVE_LIBQTCORE$])
m4trace:configure.ac:42: -1- m4_pattern_allow([^HAVE_LIBQTGUI$])
m4trace:configure.ac:44: -1- m4_pattern_allow([^HAVE_LIBREGEX$])
m4trace:configure.ac:45: -1- m4_pattern_allow([^HAVE_LIBZLIB$])
m4trace:configure.ac:46: -1- m4_pattern_allow([^HAVE_LIBINTL$])
m4trace:configure.ac:48: -1- m4_pattern_allow([^HAVE_LIBPTHREAD$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^HAVE_LIBGOMP$])
m4trace:configure.ac:58: -1- m4_pattern_allow([^XMKMF$])
m4trace:configure.ac:58: -1- m4_pattern_allow([^CXXCPP$])
m4trace:configure.ac:58: -1- m4_pattern_allow([^CPPFLAGS$])
m4trace:configure.ac:58: -1- m4_pattern_allow([^CXXCPP$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^GREP$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^EGREP$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^STDC_HEADERS$])
m4trace:configure.ac:148: -1- AX_OPENMP([OPENMP=1], [OPENMP=0])
m4trace:configure.ac:189: -1- m4_pattern_allow([^OPENMP_CXXFLAGS$])
m4trace:configure.ac:190: -1- m4_pattern_allow([^OPENMP_CFLAGS$])
m4trace:configure.ac:191: -1- m4_pattern_allow([^DENY_OPENMP_CXXFLAGS$])
m4trace:configure.ac:192: -1- m4_pattern_allow([^DENY_OPENMP_CFLAGS$])
m4trace:configure.ac:210: -1- m4_pattern_allow([^CONSOLE$])
m4trace:configure.ac:226: -1- m4_pattern_allow([^LIB@&t@OBJS$])
m4trace:configure.ac:226: -1- m4_pattern_allow([^LTLIBOBJS$])
