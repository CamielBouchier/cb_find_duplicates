#;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
# 
#  $BeginLicense$
#  $EndLicense$
# 
#;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ([2.64])

AC_INIT([cb_find_duplicates], 
        [0_1_0],    
        [cb_find_duplicates@bouchier.be],
        [cb_find_duplicates_0_1_0.tgz])

AC_REVISION([$Revision])

AC_CONFIG_MACRO_DIRS([m4])
AC_CONFIG_SRCDIR([sources/cb_find_duplicates.cpp])
AC_CONFIG_HEADERS([config.h])

# Checks for programs.
AC_PROG_CXX
AC_PROG_CC

#;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#
# Some CB trickery to find out if we are clang or g++ ...
#
#;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

CB_CXX_VERSION=`"$CXX" --version 2>/dev/null`

AS_CASE([$CB_CXX_VERSION], [g++*],     [CB_COMPILER="GNU"],  [])
AS_CASE([$CB_CXX_VERSION], [clang*], [CB_COMPILER="CLANG"],[])

if test x"$CB_COMPILER" = "x" ; then
    AC_MSG_FAILURE("Not foreseen compiler. Review.")
fi

#;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#
# Define C++ language with standard C++14 mode.
#
#;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

AC_LANG(C++)
AX_CXX_COMPILE_STDCXX([14], [noext])

#;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#
# Expected libraries
#
#;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

AC_CHECK_LIB([m], [main])
AC_CHECK_LIB([jpeg], [main])
AC_CHECK_LIB([png], [main])
AC_CHECK_LIB([tiff], [main])
AC_CHECK_LIB([expat], [main])
AC_CHECK_LIB([lua], [main])
AC_CHECK_LIB([QtCore], [main])
AC_CHECK_LIB([QtGui], [main])
# Followings are in fact only in mingw version.
AC_CHECK_LIB([regex], [main])
AC_CHECK_LIB([zlib], [main])
AC_CHECK_LIB([intl], [main])
# OpenMP and threads
AC_CHECK_LIB([pthread], [main])

if test x"$CB_COMPILER" = "xGNU" ; then
    AC_CHECK_LIB([gomp], [main])
fi

if test x"$CB_COMPILER" = "xCLANG" ; then
    AC_CHECK_LIB([omp], [main])
fi

################################################################################
#
# Expected headers
# (autogenerated)
#
################################################################################

AC_PATH_X
AC_CHECK_HEADERS([fcntl.h float.h libintl.h limits.h locale.h netinet/in.h stddef.h stdint.h stdlib.h string.h sys/time.h unistd.h utime.h lua.hpp])

################################################################################
#
# Try to locate qmake.
# We will rely on it for the final Makefile creation.
#
################################################################################

QMAKE_COMMAND="qmake"

# Initial check on qmake presence.
QMAKE_TEST="$QMAKE_COMMAND -query"
AC_MSG_CHECKING([whether qmake is present])
AS_ECHO("")
AC_TRY_EVAL(QMAKE_TEST)
if test "x$ac_status" != "x0" ; then
  ## We could workaround for linux, but the mingw version has
  ## all of its critical dll also over there.
  AC_MSG_ERROR([Could not run qmake (it *must* be in your path) ...])
fi
AC_MSG_RESULT([Looks good ...])

################################################################################
#
# Check if qmake is able of building a trivial program.
# By the way, the program in itself will answer us if the
# Qt version is sufficient.
#
################################################################################

# QMaking the makefile.
AC_MSG_CHECKING([whether qmake is building a makefile])
QMAKE_TESTDIR="configure_tests/minimum_qt_version"
QMAKE_TEST="cd $QMAKE_TESTDIR; $QMAKE_COMMAND -o makefile version_test.pro"
AC_TRY_EVAL(QMAKE_TEST)
if test "x$ac_status" != "x0" ; then
  AC_MSG_ERROR([Could not run qmake ...])
fi
AC_MSG_RESULT([Looks good ...])

# Making it. (touch the source to force build)
AC_MSG_CHECKING([whether make is building])
MAKE_TEST="cd $QMAKE_TESTDIR; touch version_test.cpp; make -f makefile"
AC_TRY_EVAL(MAKE_TEST)
if test "x$ac_status" != "x0" ; then
  AC_MSG_ERROR([Could not run make ...])
fi
AC_MSG_RESULT([Looks good ...])

################################################################################
#
# Check QT Version
# We use the program that we built in previous step therefore.
#
################################################################################

# Running it and checking if reports ok qua version.
AC_MSG_CHECKING([Qt version])
AS_ECHO("")
RUN_TEST="$QMAKE_TESTDIR/version_test"
AC_TRY_EVAL(RUN_TEST)
if test "x$ac_status" != "x0" ; then
  AC_MSG_ERROR([Insufficient Qt version ...])
fi
AC_MSG_RESULT([Looks good ...])

################################################################################
#
# OpenMP related.
#
# Check for OpenMP.
# If available, check if it is useable interoperable with QThread.
# (otherwise it cannot be enabled, cb_find_duplicates is already threaded)
#
################################################################################

OPENMP=0
OPENMP_INTEROP=0

AC_ARG_WITH([openmp],
            [AS_HELP_STRING([--without-openmp],
                            [disable openmp])],
            [],
            [with_openmp=yes])

# If user did not disable, let first see if our compiler has the 
# option for it.
if test "$with_openmp" = yes; then
  AX_OPENMP( [OPENMP=1], [OPENMP=0])
fi

if test "$OPENMP" = "1" ; then
  # Do our own checking if OpenMP cooperates with qthreads.
  # We do so via building an application with qmake again.
  AC_MSG_CHECKING([whether OpenMP is interoperable with QThread])
  AS_ECHO("")
  # QMaking the makefile.
  AC_MSG_NOTICE([qmake is building a makefile])
  QMAKE_TESTDIR="configure_tests/qthread_openmp_test"
  QMAKE_TEST="cd $QMAKE_TESTDIR; $QMAKE_COMMAND \"QMAKE_CXXFLAGS_RELEASE+=$OPENMP_CXXFLAGS\" \"LIBS+=$LIBS\" -o makefile omp_test.pro"
  AC_TRY_EVAL(QMAKE_TEST)
  if test "x$ac_status" != "x0" ; then
    AC_MSG_ERROR([Could not run qmake ...])
  fi
  # Making it. (touch the source to force build)
  AC_MSG_NOTICE([make is building a test])
  MAKE_TEST="cd $QMAKE_TESTDIR; touch omp_test.cpp; make -f makefile"
  AC_TRY_EVAL(MAKE_TEST)
  if test "x$ac_status" != "x0" ; then
    AC_MSG_ERROR([Could not run make ...])
  fi
  # Running it.
  RUN_TEST="$QMAKE_TESTDIR/omp_test"
  AC_TRY_EVAL(RUN_TEST)
  if test "x$ac_status" = "x0" ; then
    OPENMP_INTEROP=1
    AC_MSG_RESULT([Looks good , OpenMP will be used ...])
  fi
fi

if test "$OPENMP_INTEROP" = "0" ; then
  # Here because there was no OpenMP (requested) or it is not useable.
  AC_MSG_RESULT([OpenMP will not be used ...])
  # Explicit remove stuff as ImageMagick for instance might have decided
  # to include it. We deny.
  DENY_OPENMP_CXXFLAGS=$OPENMP_CXXFLAGS
  DENY_OPENMP_XFLAGS=$OPENMP_CFLAGS
fi

AC_SUBST(OPENMP_CXXFLAGS)
AC_SUBST(OPENMP_CFLAGS)
AC_SUBST(DENY_OPENMP_CXXFLAGS)
AC_SUBST(DENY_OPENMP_CFLAGS)

################################################################################
#
# Whether or not to build console application.
#
################################################################################

AC_ARG_WITH([console],
            [AS_HELP_STRING([--without-console],
                            [disable console])],
            [],
            [with_console=yes])

if test "$with_console" = yes; then
  CONSOLE=console
fi

AC_SUBST(CONSOLE)

################################################################################
#
# Checks for versions of major dependencies.
#
################################################################################

PKG_CHECK_MODULES([LUA], [lua > 5.3])
AC_SUBST(LUA_CFLAGS)
AC_SUBST(LUA_LIBS)

################################################################################
#
# Issue output (substituting stuff in the .in file)
# At this moment only the cb_find_duplicatesProject.pro is generated this way.
# 
################################################################################

AC_CONFIG_FILES([cb_find_duplicates.pro])
AC_OUTPUT

################################################################################
#
# And for the remainder of the work we rely now on qmake.
# Looks a nice mix and match approach to me ;)
#
################################################################################

#
AC_MSG_NOTICE([Removing pre-existing Makefiles])
CMD_REMOVE="rm Makefile"
AC_TRY_EVAL(CMD_REMOVE)

# QMaking the makefile.
AC_MSG_CHECKING([whether qmake is building the final makefile])
QMAKE_TEST="$QMAKE_COMMAND cb_find_duplicates.pro"
AC_TRY_EVAL(QMAKE_TEST)
if test "x$ac_status" != "x0" ; then
  AC_MSG_ERROR([Could not run qmake ...])
fi
AC_MSG_RESULT([Looks good ...])

################################################################################

AS_ECHO("DONE.")
AS_ECHO("You can now build cb_find_duplicates by issuing 'make'.")

################################################################################

# vim: ts=4 sw=4 sts=4 sr et columns=100
